#!/bin/env bash
###############################################################################
# exit on command errors (so you MUST handle exit codes properly!)
set -e
# pass trap handlers down to subshells
set -E
# capture fail exit codes in piped commands
set -o pipefail
# execution tracing debug messages (for debugging option/input logic)
# set -x

# Program configuration and helpers
###############################################################################

# Error handler
on_err() {
    echo ">> ERROR: $?"
    FN=0
    for LN in "${BASH_LINENO[@]}"; do
        [ "${FUNCNAME[$FN]}" = "main" ] && break
        echo ">> ${BASH_SOURCE[$FN]} $LN ${FUNCNAME[$FN]}"
        FN=$(( FN + 1 ))
    done
}
trap on_err ERR

# Exit handler
declare -a EXIT_CMDS
add_exit_cmd() { EXIT_CMDS+="$*;  "; }
on_exit(){ eval "${EXIT_CMDS[@]}"; }
trap on_exit EXIT

# absolute path to command (used for show_help)
CMD="$(readlink -f $0)"

# Defaults and command line options
[ "$VERBOSE" ] ||  VERBOSE=
[ "$QUIET" ]   ||  QUIET=
[ "$DEBUG" ]   ||  DEBUG=
[ "$DEV" ]     ||  DEV=0
[ "$SERVE" ]   ||  SERVE=0
[ "$SHTDN" ]   ||  SHTDN=0
[ "$BOOT" ]    ||  BOOT=0
[ "$PUBLISH" ] ||  PUBLISH=0
[ "$GOTW" ]    ||  GOTW=0
[ "$DATEFORM" ]||  DATEFORM="%F %T(%Z)"
[ "$OUTPUT" ]  ||  OUTPUT="/tmp/sm.log" # useful for catching errors

# Logging helpers
out() { echo "$(date +"$DATEFORM"): $*" | tee $OUTPUT; }
err() { out "$*" 1>&2; }
vrb() { [ ! "$VERBOSE" ] || out "$@"; }
dbg() { [ ! "$DEBUG" ] || err "$@"; }
die() { err "EXIT: $1" && [ "$2" ] && [ "$2" -ge 0 ] && exit "$2" || exit 1; }

# Show help function to be used below
show_help() {
    awk 'NR>1{print} /^(###|$)/{exit}' "$CMD"
    echo "USAGE: $(basename "$CMD") [options] [command]"
    echo "OPTS:"
    MSG=$( sed -n '/^## Options/,/-?/p' "$CMD" | head -n -1 | sed -e 's/^[[:space:]]*/  /' -e 's/|/, /' -e 's/)//' | grep '^  -')
    EMSG=$(eval "echo \"$MSG\"")
    echo "$EMSG"
    echo "CMDS:"
    MSG=$( sed -n '/^## Options/,/-?/p' "$CMD" | head -n -1 | sed -e 's/^[[:space:]]*/  /' | grep '^  [a-z|]\+) ' | sed -e 's/|/, /'  -e 's/)//' )
    EMSG=$(eval "echo \"$MSG\"")
    echo "$EMSG"
}

## Options and arguments
while [[ $# -gt 0 ]]; do
    opt="$1"; shift; #expose next argument
    case "$opt" in
    -h|--help)           # Show this help message
        show_help; exit 0; ;;
    -x|--debug)          # Enable debugging messages (implies verbose)
        DEBUG=$(( DEBUG + 1 )) && VERBOSE="$DEBUG" && DATEFORM='%a %b %d, %r (%Z %:::z)' && out "# INFO: Running in Debug mode"; ;;
    -v|--verbose)        # Enable verbose messages
        VERBOSE=$(( VERBOSE + 1 )) && DATEFORM='%a %b %d, %r (%Z %:::z)' && out "# INFO: Running in Verbose mode"; ;;
    -q|--quiet)          # limit output to major steps and errors
        QUIET=$(( QUIET + 1 )) && exec >$OUTPUT && OUTPUT=$(tty) && out "# INFO: Running in Quiet mode"; ;;
    d|dev)               # start dev container
        DEV=$(( DEV + 1 )) && vrb "# INFO: Dev server will be started"; ;;
    s|serve)             # build and serve site locally
        SERVE=$(( SERVE + 1 )) && vrb "# INFO: App server will be started"; ;;
    k|kill)              # kill local jekyll if running
        SHTDN=$(( SHTDN + 1 )) && vrb "# INFO: Server will be shutdown"; ;;
    b|boot)              # bootstrap local environment
        BOOT=$(( PUBLISH + 1 )) && vrb "# INFO: Local environment will be bootstrapped"; ;;
    ng|gotw)             # create a new Game of the Week draft post, arg1: Week #, arg2: yyyy-mm-dd, arg3: team1, arg4: team2
        GOTW=$(( GOTW + 1 )) && GOTW_WEEK=$1 && GOTW_DATE=$2 && GOTW_TEAM1=$3 && GOTW_TEAM2=$4 \
                             && shift 4 && vrb "# INFO: GOTW Draft will be created"; ;;
    -?)                   # handle invalid options
        die "# ERROR: Invalid option supplied: '$opt'. Execute '$(basename $CMD)' -h for usage information"; ;;
    help)                # build and serve site locally
        show_help; exit 0; ;;
    *)                   # handle invalid commands
        die "# ERROR: Invalid command supplied: '$opt'. Execute '$(basename $CMD)' -h for usage information"; ;;
esac; done

# Program execution
###############################################################################
dev() {
    buildah bud -f Dockerfile.dev -t phoenix-dev:latest .
    podman run --rm -it -p 4000:4000 -v $(pwd):/opt/app:Z localhost/phoenix-dev:latest
}

app() {
    buildah bud -f Dockerfile -t phoenix-app:latest .
    podman run --ulimit=host --rm -it -p 4000:4000 localhost/phoenix-app:latest /bin/sh
    #helm install .helm
}

boot() {
    minikube start
    kubectl apply --filename https://storage.googleapis.com/tekton-releases/pipeline/latest/release.yaml
}

# don't start debugging until after inputs are parsed
[ "$DEBUG" ]  &&  set -x

if [ $DEV -gt 0 ]; then
    dev
fi

if [ $SERVE -gt 0 ]; then
    app
fi

if [ $BOOT -gt 0 ]; then
    boot
fi